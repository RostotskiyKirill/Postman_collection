{
	"info": {
		"_postman_id": "541fe273-486d-4695-acc9-f9f0a03c2b88",
		"name": "API Star Wars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "Correct response JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Correct Response format JSON\r",
									"pm.test(\"Correct response JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//2. We have all declared fields in the response\r",
									"pm.test(\"Check that we have all declared fields\", function(){\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"//3. Field value is not NULL\r",
									"pm.test(\"Check if value is not NULL\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).not.equal(null);\r",
									"});\r",
									"\r",
									"//4. Check value is not empty\r",
									"pm.test(\"Check value is not empty\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).not.equal(\"\");\r",
									"});\r",
									"\r",
									"//5. Check if field corresponds to a specific value\r",
									"pm.test(\"Check if field corresponds to a specific value\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.equal(\"Tatooine\");\r",
									"});\r",
									"\r",
									"//6. Status code is 200\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//7. Status message is ok\r",
									"pm.test(\"Status message is ok\", function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//8. Response time is less than 1000ms\r",
									"pm.test(\"Response time is less than 1000ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//9. There is a specific header in the response\r",
									"pm.test(\"There is a specific header in the response\", function(){\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//10. The response has a specific header with is specific value\r",
									"pm.test(\"The response has a specific header with is specific value\", function(){\r",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"//11. Cookie exist\r",
									"pm.test(\"Cookie exist\", function(){\r",
									"    pm.cookies.has(\"__ddg1_\")\r",
									"});\r",
									"\r",
									"//12. Cookie has value\r",
									"pm.test(\"Cookie has value\", function(){\r",
									"    try{\r",
									"        var MY_COOKIE = pm.cookies.get(\"__ddg1_\")\r",
									"        console.log(MY_COOKIE);\r",
									"    }\r",
									"    catch(e) {\r",
									"        console.log(\"SOME PROBLEM WITH Cookie ->\" + e)\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://swapi.dev/api/planets/1/",
							"protocol": "http",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"planets",
								"1",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Tiny Validator JSON SHEMA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); // парсим респонс\r",
									"\r",
									"var schema = {\r",
									"    // specify the type of object\r",
									"    \"type\": \"object\",\r",
									"    // specify requires properties\r",
									"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
									"    // describe properties\r",
									"    \"properties\": {\r",
									"        \"people\": {\"type\": \"string\"},\r",
									"        \"planets\": {\"type\": \"string\"},\r",
									"        \"films\": {\"type\": \"string\"},\r",
									"        \"species\": {\"type\": \"string\"},\r",
									"        \"vehicles\": {\"type\": \"string\"},\r",
									"        \"starships\": {\"type\": \"string\"},\r",
									"    }\r",
									"\r",
									"};\r",
									"pm.test(\"Body is correct\", function(){\r",
									"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Tiny Validator JSON SHEMA People",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); // парсим респонс\r",
									"\r",
									"var schema = { // Описание схемы\r",
									"    // specify the type of object\r",
									"    \"type\": \"object\", // Тип возвращаемого объекта\r",
									"    // specify requires properties\r",
									"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"], // Описание обязательных полей, которые возвращаются в ответе\r",
									"    // describe properties\r",
									"    \"properties\": { // Свойства этих полей\r",
									"        \"name\": {\"type\": \"string\"},\r",
									"        \"homeworld\": {\"type\": \"string\"},\r",
									"        \"films\": { // Массив из списка\r",
									"            \"type\": \"array\", // Задаем тип аррай т.к это массив\r",
									"            \"items\": {\"type\": \"string\"} // Вложенные списки массива с типом строка\r",
									"        },\r",
									"        \"species\": {\"type\": \"array\"},\r",
									"        \"vehicles\": {\"type\": \"array\"},\r",
									"        \"starships\": {\"type\": \"array\"},\r",
									"    }\r",
									"\r",
									"};\r",
									"pm.test(\"Body is correct\", function(){\r",
									"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/people/1",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"people",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}